
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/parameter_tests.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_tutorials_parameter_tests.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_parameter_tests.py:


6. Parameter tests
==================

The modeller ``emg3d`` has quite a few parameters which can influence the speed
of a computation. It can be difficult to estimate which is the best setting. In
the case that speed is of utmost importance, and a lot of similar models are
going to be computed (e.g. for inversions), it might be worth to do some
input parameter testing.

**IMPORTANT:** None of the conclusions you can draw from these figures are
applicable to other models. What is faster depends on your input. Influence has
particularly the degree of anisotropy and of grid stretching. These are simply
examples that you can adjust for your problem at hand.

.. GENERATED FROM PYTHON SOURCE LINES 17-24

.. code-block:: default

    import emg3d
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm
    plt.style.use('bmh')









.. GENERATED FROM PYTHON SOURCE LINES 26-45

.. code-block:: default

    def plotit(infos, labels):
        """Simple plotting routine for the tests."""

        plt.figure()

        # Loop over infos.
        for i, info in enumerate(infos):
            plt.plot(info['runtime_at_cycle'],
                     info['error_at_cycle']/info1['ref_error'],
                     '.-', label=labels[i])

        plt.legend()
        plt.xlabel('Time (s)')
        plt.ylabel('Rel. Error $(-)$')
        plt.yscale('log')

        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 46-88

.. code-block:: default


    # Survey
    zwater = 1000                  # Water depth.
    src = [0, 0, 50-zwater, 0, 0]  # Source at origin, 50 m above seafloor.
    freq = 1.0                     # Frequency (Hz).

    # Mesh
    grid = emg3d.construct_mesh(
        frequency=freq,
        min_width_limits=100,
        properties=[0.3, 1., 1., 0.3],
        center=(src[0], src[1], -1000),
        domain=([-1000, 5000], [-500, 500], [-2500, 0]),
    )
    print(grid)

    # Source-field
    sfield = emg3d.get_source_field(grid, source=src, frequency=freq)

    # Create a simple marine model for the tests.

    # Layered_background
    res_x = 1e8*np.ones(grid.shape_cells)              # Air
    res_x[:, :, grid.cell_centers_z <= 0] = 0.3     # Water
    res_x[:, :, grid.cell_centers_z <= -1000] = 1.  # Background

    # Target
    xt = np.nonzero((grid.cell_centers_x >= -500) &
                    (grid.cell_centers_x <= 5000))[0]
    yt = np.nonzero((grid.cell_centers_y >= -1000) &
                    (grid.cell_centers_y <= 1000))[0]
    zt = np.nonzero((grid.cell_centers_z >= -2100) &
                    (grid.cell_centers_z <= -1800))[0]
    res_x[xt[0]:xt[-1]+1, yt[0]:yt[-1]+1, zt[0]:zt[-1]+1] = 100

    # Create a model instance
    model_iso = emg3d.Model(grid, property_x=res_x, mapping='Resistivity')

    # Plot it for QC
    grid.plot_3d_slicer(model_iso.property_x.ravel('F'),
                        pcolor_opts={'norm': LogNorm()})




.. image:: /gallery/tutorials/images/sphx_glr_parameter_tests_001.png
    :alt: parameter tests
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


      TensorMesh: 76,800 cells

                          MESH EXTENT             CELL WIDTH      FACTOR
      dir    nC        min           max         min       max      max
      ---   ---  ---------------------------  ------------------  ------
       x     80     -4,244.80      8,244.80    100.00    656.64    1.21
       y     24     -3,703.39      3,703.39    100.00    996.95    1.39
       z     40     -5,714.95      2,357.76    100.00    857.19    1.31






.. GENERATED FROM PYTHON SOURCE LINES 89-91

Test 1: F, W, and V MG cycles
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 91-101

.. code-block:: default


    inp = {'model': model_iso, 'sfield': sfield, 'return_info': True,
           'sslsolver': False, 'semicoarsening': False, 'linerelaxation': False}

    _, info1 = emg3d.solve(cycle='F', **inp)
    _, info2 = emg3d.solve(cycle='W', **inp)
    _, info3 = emg3d.solve(cycle='V', **inp)

    plotit([info1, info2, info3], ['F-cycle', 'W-cycle', 'V-cycle'])




.. image:: /gallery/tutorials/images/sphx_glr_parameter_tests_002.png
    :alt: parameter tests
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-104

Test 2: semicoarsening, line-relaxation
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 104-115

.. code-block:: default


    inp = {'model': model_iso, 'sfield': sfield, 'return_info': True,
           'sslsolver': False}

    _, info1 = emg3d.solve(semicoarsening=False, linerelaxation=False, **inp)
    _, info2 = emg3d.solve(semicoarsening=True, linerelaxation=False, **inp)
    _, info3 = emg3d.solve(semicoarsening=False, linerelaxation=True, **inp)
    _, info4 = emg3d.solve(semicoarsening=True, linerelaxation=True, **inp)

    plotit([info1, info2, info3, info4], ['MG', 'MG+SC', 'MG+LR', 'MG+SC+LR'])




.. image:: /gallery/tutorials/images/sphx_glr_parameter_tests_003.png
    :alt: parameter tests
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 116-118

Test 3: MG and BiCGstab
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 118-128

.. code-block:: default


    inp = {'model': model_iso, 'sfield': sfield, 'return_info': True, 'maxit': 500,
           'semicoarsening': True, 'linerelaxation': False}

    _, info1 = emg3d.solve(cycle='F', sslsolver=False, **inp)
    _, info2 = emg3d.solve(cycle='F', sslsolver=True, **inp)
    _, info3 = emg3d.solve(cycle=None, sslsolver=True, **inp)

    plotit([info1, info2, info3], ['MG', 'MG+BiCGStab', 'BiCGStab'])




.. image:: /gallery/tutorials/images/sphx_glr_parameter_tests_004.png
    :alt: parameter tests
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    * WARNING :: Error in bicgstab (-10)




.. GENERATED FROM PYTHON SOURCE LINES 129-131

Test 4: `nu_init`, `nu_pre`, `nu_coarse`, `nu_post`
---------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 131-143

.. code-block:: default


    inp = {'model': model_iso, 'sfield': sfield, 'return_info': True,
           'sslsolver': False, 'semicoarsening': True, 'linerelaxation': False}

    _, info1 = emg3d.solve(**inp)
    _, info2 = emg3d.solve(nu_pre=0, **inp)
    _, info3 = emg3d.solve(nu_post=0, **inp)
    _, info4 = emg3d.solve(nu_init=2, **inp)

    plotit([info1, info2, info3, info4],
           ['{0,2,1,2} (default)', '{0,0,1,2}', '{0,2,1,0}', '{2,1,2,1}'])




.. image:: /gallery/tutorials/images/sphx_glr_parameter_tests_005.png
    :alt: parameter tests
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-146

.. code-block:: default


    emg3d.Report()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='border: 3px solid #ddd;'>
      <tr>
         <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Sat Jul 17 18:00:52 2021 CEST</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
        <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
        <td style='text-align: left; border: 2px solid #fff;'>4</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
        <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
        <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
        <td style='text-align: left; border: 2px solid #fff;'>15.5 GiB</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
        <td style='text-align: left; border: 2px solid #fff;'>Python</td>
      </tr>
      <tr>
         <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.9.4 | packaged by conda-forge | (default, May 10 2021, 22:13:33) 
    [GCC 9.3.0]</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.21.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numba</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.53.1</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>emg3d</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.1.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>empymod</td>
        <td style='text-align: left; border: 2px solid #fff;'>2.1.2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>xarray</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.18.2</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>h5py</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.3.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.4.2</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>tqdm</td>
        <td style='text-align: left; border: 2px solid #fff;'>4.61.2</td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
      </tr>
      <tr>
         <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications</td>
      </tr>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  45.699 seconds)

**Estimated memory usage:**  39 MB


.. _sphx_glr_download_gallery_tutorials_parameter_tests.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: parameter_tests.py <parameter_tests.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: parameter_tests.ipynb <parameter_tests.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
