
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/simulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_tutorials_simulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_simulation.py:


3. Simulation
=============

The easiest way to model CSEM data for a survey is to make use of the Survey
and Simulation classes, :class:`emg3d.surveys.Survey` and
:class:`emg3d.simulations.Simulation`, respectively, together with the
automatic gridding functionality.

For this example we use the resistivity model created in the example
:ref:`sphx_glr_gallery_models_gempy-ii.py`.

.. GENERATED FROM PYTHON SOURCE LINES 14-28

.. code-block:: default

    import os
    import pooch
    import emg3d
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm
    from scipy.interpolate import RectBivariateSpline
    plt.style.use('bmh')


    # Adjust this path to a folder of your choice.
    data_path = os.path.join('..', 'download', '')









.. GENERATED FROM PYTHON SOURCE LINES 29-33

Fetch the model
---------------

Retrieve and load the pre-computed resistivity model.

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: default


    fname = "GemPy-II.h5"
    pooch.retrieve(
        'https://raw.github.com/emsig/data/2021-05-21/emg3d/models/'+fname,
        'ea8c23be80522d3ca8f36742c93758370df89188816f50cb4e1b2a6a3012d659',
        fname=fname,
        path=data_path,
    )
    model = emg3d.load(data_path + fname)['model']






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Data loaded from «/home/dtr/Codes/emsig/emg3d-gallery/examples/download/GemPy-II.h5»
    [emg3d v1.0.0rc3.dev5+g0cd9e09 (format 1.0) on 2021-05-21T18:40:16.721968].




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Let's check the model

.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: default


    model






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Model: resistivity; isotropic; 100 x 100 x 102 (1,020,000)



.. GENERATED FROM PYTHON SOURCE LINES 51-53

So it is an isotropic model defined in terms of resistivities. Let's check
the grid

.. GENERATED FROM PYTHON SOURCE LINES 53-58

.. code-block:: default


    grid = model.grid
    grid







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr>
        <td style='font-weight: bold; font-size: 1.2em; text-align: center;' colspan='3'>TensorMesh</td>
        <td style='font-size: 1.2em; text-align: center;'colspan='4'>1,020,000 cells</td>
      </tr>
      <tr>
        <th></th>
        <th></th>
        <th colspan='2' style='padding: 5px 20px 5px 20px;'>MESH EXTENT</th>
        <th colspan='2' style='padding: 5px 20px 5px 20px;'>CELL WIDTH</th>
        <th style='padding: 5px 20px 5px 20px;'>FACTOR</th>
      </tr>
      <tr>
        <th style='padding: 5px 20px 5px 20px;'>dir</th>
        <th style='padding: 5px 20px 5px 20px;'>nC</th>
        <th style='padding: 5px 20px 5px 20px;'>min</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
        <th style='padding: 5px 20px 5px 20px;'>min</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>x</td>
        <td style='padding: 5px 20px 5px 20px;'>100</td>
        <td style='padding: 5px 20px 5px 20px;'>0.00</td>
        <td style='padding: 5px 20px 5px 20px;'>20,000.00</td>
        <td style='padding: 5px 20px 5px 20px;'>200.00</td>
        <td style='padding: 5px 20px 5px 20px;'>200.00</td>
        <td style='padding: 5px 20px 5px 20px;'>1.00</td>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>y</td>
        <td style='padding: 5px 20px 5px 20px;'>100</td>
        <td style='padding: 5px 20px 5px 20px;'>0.00</td>
        <td style='padding: 5px 20px 5px 20px;'>20,000.00</td>
        <td style='padding: 5px 20px 5px 20px;'>200.00</td>
        <td style='padding: 5px 20px 5px 20px;'>200.00</td>
        <td style='padding: 5px 20px 5px 20px;'>1.00</td>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>z</td>
        <td style='padding: 5px 20px 5px 20px;'>102</td>
        <td style='padding: 5px 20px 5px 20px;'>-7,000.00</td>
        <td style='padding: 5px 20px 5px 20px;'>500.00</td>
        <td style='padding: 5px 20px 5px 20px;'>50.00</td>
        <td style='padding: 5px 20px 5px 20px;'>2,000.00</td>
        <td style='padding: 5px 20px 5px 20px;'>40.00</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-78

Define the survey
-----------------

If you have actual field data then this info would normally come from a data
file or similar. Here we create our own dummy survey, and later will create
synthetic data for it.

A **Survey** instance contains all survey-related information, hence source
and receiver positions and measured data. See the relevant documentation for
more details: :class:`emg3d.surveys.Survey`.


Extract seafloor to simulate source and receiver depths
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

To create a realistic survey we create a small routine that finds the
seafloor, so we can place receivers on the seafloor and sources 50 m above
it. We use the fact that the seawater has resistivity of 0.3 Ohm.m in the
model, and is the lowest value.

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default


    seafloor = np.ones((grid.shape_cells[0], grid.shape_cells[1]))
    for i in range(grid.shape_cells[0]):
        for ii in range(grid.shape_cells[1]):
            # We take the seafloor to be the first cell which resistivity
            # is below 0.33
            seafloor[i, ii] = grid.nodes_z[:-1][
                    model.property_x[i, ii, :] < 0.33][0]

    # Create a 2D interpolation function from it
    bathymetry = RectBivariateSpline(
            grid.cell_centers_x, grid.cell_centers_y, seafloor)









.. GENERATED FROM PYTHON SOURCE LINES 93-111

Source and receiver positions
'''''''''''''''''''''''''''''

Sources and receivers can be defined in a few different ways. One way is by
providing coordinates, where two coordinate formats are accepted:

- ``(x0, x1, y0, y1, z0, z1)``: finite length dipole,
- ``(x, y, z, azimuth, elevation)``: point dipole,

where the angles (azimuth and elevation) are in degrees. For the coordinate
system see `coordinate_system
<https://empymod.emsig.xyz/en/stable/examples/coordinate_system.html>`_.

A survey can contain electric and magnetic receivers, arbitrarily rotated.
However, the ``Simulation`` is currently limited to electric receivers.

Note that the survey just knows about the sources, receivers, frequencies,
and observed data - it does not know anything of an underlying model.

.. GENERATED FROM PYTHON SOURCE LINES 111-140

.. code-block:: default


    # Angles for horizontal, x-directed Ex point dipoles
    elevation = 0.0
    azimuth = 0.0

    # Acquisition source frequencies (Hz)
    frequencies = [0.5, 1.0]

    # Source coordinates
    src_x = np.arange(1, 4)*5000
    src_y = 7500
    # Source depths: 50 m above seafloor
    src_z = bathymetry(src_x, src_y).ravel()+50
    src = emg3d.surveys.txrx_coordinates_to_dict(
            emg3d.TxElectricDipole,
            (src_x, src_y, src_z, azimuth, elevation)
    )

    # Receiver positions
    rec_x = np.arange(3, 18)*1e3
    rec_y = np.arange(3)*1e3+6500
    RX, RY = np.meshgrid(rec_x, rec_y, indexing='ij')
    RZ = bathymetry(rec_x, rec_y)
    rec = emg3d.surveys.txrx_coordinates_to_dict(
            emg3d.RxElectricPoint,
            (RX.ravel(), RY.ravel(), RZ.ravel(), azimuth, elevation)
    )









.. GENERATED FROM PYTHON SOURCE LINES 141-149

Create Survey
'''''''''''''

If you have observed data you can provide them, here we will create synthetic
data later on. What you have to define is the expected noise floor and
relative error, which is used to compute the misfit later on. Alternatively
you can provide directly the standard deviation; see
:class:`emg3d.surveys.Survey`.

.. GENERATED FROM PYTHON SOURCE LINES 149-164

.. code-block:: default


    survey = emg3d.surveys.Survey(
        name='GemPy-II Survey A',  # Name of the survey
        sources=src,               # Source coordinates
        receivers=rec,             # Receiver coordinates
        frequencies=frequencies,   # Two frequencies
        # data=data,               # If you have observed data
        noise_floor=1e-15,
        relative_error=0.05,
    )

    # Let's have a look at the survey:
    survey







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h3>Survey «GemPy-II Survey A»</h3><div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2 {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:   (freq: 2, rec: 45, src: 3)
    Coordinates:
      * src       (src) &lt;U6 &#x27;TxED-1&#x27; &#x27;TxED-2&#x27; &#x27;TxED-3&#x27;
      * rec       (rec) &lt;U7 &#x27;RxEP-01&#x27; &#x27;RxEP-02&#x27; &#x27;RxEP-03&#x27; ... &#x27;RxEP-44&#x27; &#x27;RxEP-45&#x27;
      * freq      (freq) &lt;U3 &#x27;f-1&#x27; &#x27;f-2&#x27;
    Data variables:
        observed  (src, rec, freq) complex128 (nan+nanj) (nan+nanj) ... (nan+nanj)
    Attributes:
        noise_floor:     1e-15
        relative_error:  0.05</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-4774a9a7-43da-4a35-ad2f-ac0cc2d8d6e9' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-4774a9a7-43da-4a35-ad2f-ac0cc2d8d6e9' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>freq</span>: 2</li><li><span class='xr-has-index'>rec</span>: 45</li><li><span class='xr-has-index'>src</span>: 3</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-d4ac689f-ad52-4198-823e-17dd915a1e02' class='xr-section-summary-in' type='checkbox'  checked><label for='section-d4ac689f-ad52-4198-823e-17dd915a1e02' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>src</span></div><div class='xr-var-dims'>(src)</div><div class='xr-var-dtype'>&lt;U6</div><div class='xr-var-preview xr-preview'>&#x27;TxED-1&#x27; &#x27;TxED-2&#x27; &#x27;TxED-3&#x27;</div><input id='attrs-bbcd1b5d-b6a1-463e-8d8e-a86c24120cbf' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-bbcd1b5d-b6a1-463e-8d8e-a86c24120cbf' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b1058055-c934-4578-87d8-fb541e36d513' class='xr-var-data-in' type='checkbox'><label for='data-b1058055-c934-4578-87d8-fb541e36d513' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sources :</span></dt><dd>TxED-1: TxElectricDipole: 1.0 A;
        center={5,000.0; 7,500.0; -2,305.8} m; θ=0.0°, φ=0.0°; l=1.0 m;
    TxED-2: TxElectricDipole: 1.0 A;
        center={10,000.0; 7,500.0; -2,020.7} m; θ=0.0°, φ=0.0°; l=1.0 m;
    TxED-3: TxElectricDipole: 1.0 A;
        center={15,000.0; 7,500.0; -2,170.0} m; θ=0.0°, φ=0.0°; l=1.0 m.</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;TxED-1&#x27;, &#x27;TxED-2&#x27;, &#x27;TxED-3&#x27;], dtype=&#x27;&lt;U6&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>rec</span></div><div class='xr-var-dims'>(rec)</div><div class='xr-var-dtype'>&lt;U7</div><div class='xr-var-preview xr-preview'>&#x27;RxEP-01&#x27; &#x27;RxEP-02&#x27; ... &#x27;RxEP-45&#x27;</div><input id='attrs-d861993d-f455-40f8-bc37-d5cce7bde120' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-d861993d-f455-40f8-bc37-d5cce7bde120' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d51d9078-075b-47bf-b0de-13f463e47d9d' class='xr-var-data-in' type='checkbox'><label for='data-d51d9078-075b-47bf-b0de-13f463e47d9d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Receivers :</span></dt><dd>RxEP-01: RxElectricPoint: absolute;
        x=3,000.0 m, y=6,500.0 m, z=-2,200.9 m, θ=0.0°, φ=0.0°;
    RxEP-02: RxElectricPoint: absolute;
        x=3,000.0 m, y=7,500.0 m, z=-2,220.0 m, θ=0.0°, φ=0.0°;
    RxEP-03: RxElectricPoint: absolute;
        x=3,000.0 m, y=8,500.0 m, z=-2,271.7 m, θ=0.0°, φ=0.0°;
    RxEP-04: RxElectricPoint: absolute;
        x=4,000.0 m, y=6,500.0 m, z=-2,185.2 m, θ=0.0°, φ=0.0°;
    RxEP-05: RxElectricPoint: absolute;
        x=4,000.0 m, y=7,500.0 m, z=-2,226.6 m, θ=0.0°, φ=0.0°;
    RxEP-06: RxElectricPoint: absolute;
        x=4,000.0 m, y=8,500.0 m, z=-2,207.7 m, θ=0.0°, φ=0.0°;
    RxEP-07: RxElectricPoint: absolute;
        x=5,000.0 m, y=6,500.0 m, z=-2,243.9 m, θ=0.0°, φ=0.0°;
    RxEP-08: RxElectricPoint: absolute;
        x=5,000.0 m, y=7,500.0 m, z=-2,355.8 m, θ=0.0°, φ=0.0°;
    RxEP-09: RxElectricPoint: absolute;
        x=5,000.0 m, y=8,500.0 m, z=-2,226.8 m, θ=0.0°, φ=0.0°;
    RxEP-10: RxElectricPoint: absolute;
        x=6,000.0 m, y=6,500.0 m, z=-2,181.3 m, θ=0.0°, φ=0.0°;
    RxEP-11: RxElectricPoint: absolute;
        x=6,000.0 m, y=7,500.0 m, z=-2,305.7 m, θ=0.0°, φ=0.0°;
    RxEP-12: RxElectricPoint: absolute;
        x=6,000.0 m, y=8,500.0 m, z=-2,272.6 m, θ=0.0°, φ=0.0°;
    RxEP-13: RxElectricPoint: absolute;
        x=7,000.0 m, y=6,500.0 m, z=-2,051.4 m, θ=0.0°, φ=0.0°;
    RxEP-14: RxElectricPoint: absolute;
        x=7,000.0 m, y=7,500.0 m, z=-2,108.8 m, θ=0.0°, φ=0.0°;
    RxEP-15: RxElectricPoint: absolute;
        x=7,000.0 m, y=8,500.0 m, z=-2,069.3 m, θ=0.0°, φ=0.0°;
    RxEP-16: RxElectricPoint: absolute;
        x=8,000.0 m, y=6,500.0 m, z=-2,050.1 m, θ=0.0°, φ=0.0°;
    RxEP-17: RxElectricPoint: absolute;
        x=8,000.0 m, y=7,500.0 m, z=-2,100.5 m, θ=0.0°, φ=0.0°;
    RxEP-18: RxElectricPoint: absolute;
        x=8,000.0 m, y=8,500.0 m, z=-2,025.0 m, θ=0.0°, φ=0.0°;
    RxEP-19: RxElectricPoint: absolute;
        x=9,000.0 m, y=6,500.0 m, z=-2,070.1 m, θ=0.0°, φ=0.0°;
    RxEP-20: RxElectricPoint: absolute;
        x=9,000.0 m, y=7,500.0 m, z=-2,098.6 m, θ=0.0°, φ=0.0°;
    RxEP-21: RxElectricPoint: absolute;
        x=9,000.0 m, y=8,500.0 m, z=-2,000.0 m, θ=0.0°, φ=0.0°;
    RxEP-22: RxElectricPoint: absolute;
        x=10,000.0 m, y=6,500.0 m, z=-1,997.0 m, θ=0.0°, φ=0.0°;
    RxEP-23: RxElectricPoint: absolute;
        x=10,000.0 m, y=7,500.0 m, z=-2,070.7 m, θ=0.0°, φ=0.0°;
    RxEP-24: RxElectricPoint: absolute;
        x=10,000.0 m, y=8,500.0 m, z=-2,016.3 m, θ=0.0°, φ=0.0°;
    RxEP-25: RxElectricPoint: absolute;
        x=11,000.0 m, y=6,500.0 m, z=-2,272.7 m, θ=0.0°, φ=0.0°;
    RxEP-26: RxElectricPoint: absolute;
        x=11,000.0 m, y=7,500.0 m, z=-2,300.7 m, θ=0.0°, φ=0.0°;
    RxEP-27: RxElectricPoint: absolute;
        x=11,000.0 m, y=8,500.0 m, z=-2,221.5 m, θ=0.0°, φ=0.0°;
    RxEP-28: RxElectricPoint: absolute;
        x=12,000.0 m, y=6,500.0 m, z=-2,401.2 m, θ=0.0°, φ=0.0°;
    RxEP-29: RxElectricPoint: absolute;
        x=12,000.0 m, y=7,500.0 m, z=-2,352.0 m, θ=0.0°, φ=0.0°;
    RxEP-30: RxElectricPoint: absolute;
        x=12,000.0 m, y=8,500.0 m, z=-2,345.6 m, θ=0.0°, φ=0.0°;
    RxEP-31: RxElectricPoint: absolute;
        x=13,000.0 m, y=6,500.0 m, z=-2,430.3 m, θ=0.0°, φ=0.0°;
    RxEP-32: RxElectricPoint: absolute;
        x=13,000.0 m, y=7,500.0 m, z=-2,301.3 m, θ=0.0°, φ=0.0°;
    RxEP-33: RxElectricPoint: absolute;
        x=13,000.0 m, y=8,500.0 m, z=-2,270.9 m, θ=0.0°, φ=0.0°;
    RxEP-34: RxElectricPoint: absolute;
        x=14,000.0 m, y=6,500.0 m, z=-2,295.0 m, θ=0.0°, φ=0.0°;
    RxEP-35: RxElectricPoint: absolute;
        x=14,000.0 m, y=7,500.0 m, z=-2,299.9 m, θ=0.0°, φ=0.0°;
    RxEP-36: RxElectricPoint: absolute;
        x=14,000.0 m, y=8,500.0 m, z=-2,272.3 m, θ=0.0°, φ=0.0°;
    RxEP-37: RxElectricPoint: absolute;
        x=15,000.0 m, y=6,500.0 m, z=-2,300.4 m, θ=0.0°, φ=0.0°;
    RxEP-38: RxElectricPoint: absolute;
        x=15,000.0 m, y=7,500.0 m, z=-2,220.0 m, θ=0.0°, φ=0.0°;
    RxEP-39: RxElectricPoint: absolute;
        x=15,000.0 m, y=8,500.0 m, z=-2,199.6 m, θ=0.0°, φ=0.0°;
    RxEP-40: RxElectricPoint: absolute;
        x=16,000.0 m, y=6,500.0 m, z=-2,257.7 m, θ=0.0°, φ=0.0°;
    RxEP-41: RxElectricPoint: absolute;
        x=16,000.0 m, y=7,500.0 m, z=-2,204.7 m, θ=0.0°, φ=0.0°;
    RxEP-42: RxElectricPoint: absolute;
        x=16,000.0 m, y=8,500.0 m, z=-2,199.7 m, θ=0.0°, φ=0.0°;
    RxEP-43: RxElectricPoint: absolute;
        x=17,000.0 m, y=6,500.0 m, z=-2,270.0 m, θ=0.0°, φ=0.0°;
    RxEP-44: RxElectricPoint: absolute;
        x=17,000.0 m, y=7,500.0 m, z=-2,273.8 m, θ=0.0°, φ=0.0°;
    RxEP-45: RxElectricPoint: absolute;
        x=17,000.0 m, y=8,500.0 m, z=-2,330.1 m, θ=0.0°, φ=0.0°.</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;RxEP-01&#x27;, &#x27;RxEP-02&#x27;, &#x27;RxEP-03&#x27;, &#x27;RxEP-04&#x27;, &#x27;RxEP-05&#x27;, &#x27;RxEP-06&#x27;,
           &#x27;RxEP-07&#x27;, &#x27;RxEP-08&#x27;, &#x27;RxEP-09&#x27;, &#x27;RxEP-10&#x27;, &#x27;RxEP-11&#x27;, &#x27;RxEP-12&#x27;,
           &#x27;RxEP-13&#x27;, &#x27;RxEP-14&#x27;, &#x27;RxEP-15&#x27;, &#x27;RxEP-16&#x27;, &#x27;RxEP-17&#x27;, &#x27;RxEP-18&#x27;,
           &#x27;RxEP-19&#x27;, &#x27;RxEP-20&#x27;, &#x27;RxEP-21&#x27;, &#x27;RxEP-22&#x27;, &#x27;RxEP-23&#x27;, &#x27;RxEP-24&#x27;,
           &#x27;RxEP-25&#x27;, &#x27;RxEP-26&#x27;, &#x27;RxEP-27&#x27;, &#x27;RxEP-28&#x27;, &#x27;RxEP-29&#x27;, &#x27;RxEP-30&#x27;,
           &#x27;RxEP-31&#x27;, &#x27;RxEP-32&#x27;, &#x27;RxEP-33&#x27;, &#x27;RxEP-34&#x27;, &#x27;RxEP-35&#x27;, &#x27;RxEP-36&#x27;,
           &#x27;RxEP-37&#x27;, &#x27;RxEP-38&#x27;, &#x27;RxEP-39&#x27;, &#x27;RxEP-40&#x27;, &#x27;RxEP-41&#x27;, &#x27;RxEP-42&#x27;,
           &#x27;RxEP-43&#x27;, &#x27;RxEP-44&#x27;, &#x27;RxEP-45&#x27;], dtype=&#x27;&lt;U7&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>freq</span></div><div class='xr-var-dims'>(freq)</div><div class='xr-var-dtype'>&lt;U3</div><div class='xr-var-preview xr-preview'>&#x27;f-1&#x27; &#x27;f-2&#x27;</div><input id='attrs-8d280e1d-1123-404b-924a-3dd74494ecf2' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8d280e1d-1123-404b-924a-3dd74494ecf2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-feddacb7-f820-4181-a1f6-86849518fbab' class='xr-var-data-in' type='checkbox'><label for='data-feddacb7-f820-4181-a1f6-86849518fbab' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Frequencies :</span></dt><dd>f-1: 0.5 Hz;
    f-2: 1.0 Hz.</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;f-1&#x27;, &#x27;f-2&#x27;], dtype=&#x27;&lt;U3&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-a55b9a49-362f-40b4-8e39-8b2c94549c9d' class='xr-section-summary-in' type='checkbox'  checked><label for='section-a55b9a49-362f-40b4-8e39-8b2c94549c9d' class='xr-section-summary' >Data variables: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>observed</span></div><div class='xr-var-dims'>(src, rec, freq)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>(nan+nanj) ... (nan+nanj)</div><input id='attrs-395a9ff5-74a0-4526-9955-50fb5eda7054' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-395a9ff5-74a0-4526-9955-50fb5eda7054' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fe4d40ad-7c6b-42f9-a226-9daaae5e787e' class='xr-var-data-in' type='checkbox'><label for='data-fe4d40ad-7c6b-42f9-a226-9daaae5e787e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
    ...
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj],
            [nan+nanj, nan+nanj]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-f3f88682-0ff0-46f4-9899-0cc4aea23751' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f3f88682-0ff0-46f4-9899-0cc4aea23751' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>noise_floor :</span></dt><dd>1e-15</dd><dt><span>relative_error :</span></dt><dd>0.05</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 165-172

Our survey has our sources and receivers and initiated a variable
``observed``, with NaN's. Each source and receiver got a name assigned. If
you prefer other names you would have to define the sources and receivers
through ``emg3d.surveys.Dipole``, and provide a list of dipoles to the survey
instead of only a tuple of coordinates.

We can also look at a particular source or receiver, e.g.,

.. GENERATED FROM PYTHON SOURCE LINES 172-176

.. code-block:: default


    survey.sources['TxED-1']






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    TxElectricDipole: 1.0 A;
        center={5,000.0; 7,500.0; -2,305.8} m; θ=0.0°, φ=0.0°; l=1.0 m



.. GENERATED FROM PYTHON SOURCE LINES 177-182

Which shows you all you need to know about a particular dipole: name, type
(electric or magnetic), coordinates of its center, angles, and length.

QC model and survey
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 182-201

.. code-block:: default


    grid.plot_3d_slicer(model.property_x, xslice=12000, yslice=7000,
                        pcolor_opts={'norm': LogNorm(vmin=0.3, vmax=200)})

    # Plot survey in figure above
    fig = plt.gcf()
    fig.suptitle('Resistivity model (Ohm.m) and survey layout')
    axs = fig.get_children()
    rec_coords = survey.receiver_coordinates()
    src_coords = survey.source_coordinates()
    axs[1].plot(rec_coords[0], rec_coords[1], 'bv')
    axs[2].plot(rec_coords[0], rec_coords[2], 'bv')
    axs[3].plot(rec_coords[2], rec_coords[1], 'bv')
    axs[1].plot(src_coords[0], src_coords[1], 'r*')
    axs[2].plot(src_coords[0], src_coords[2], 'r*')
    axs[3].plot(src_coords[2], src_coords[1], 'r*')
    plt.show()





.. image:: /gallery/tutorials/images/sphx_glr_simulation_001.png
    :alt: Resistivity model (Ohm.m) and survey layout
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 202-218

Create a Simulation (to compute 'observed' data)
------------------------------------------------

The simulation class combines a model with a survey, and can compute
synthetic data for it.

Automatic gridding
''''''''''''''''''

We use the automatic gridding feature implemented in the simulation class to
use source- and frequency- dependent grids for the computation.
Consult the following docs for more information:

- `gridding_opts` in :class:`emg3d.simulations.Simulation`;
- :func:`emg3d.simulations.estimate_gridding_opts`; and
- :func:`emg3d.meshes.construct_mesh`.

.. GENERATED FROM PYTHON SOURCE LINES 218-231

.. code-block:: default


    gopts = {
        'properties': [0.3, 10, 1., 0.3],
        'min_width_limits': (100, 100, 50),
        'stretching': (None, None, [1.05, 1.5]),
        'domain': (
            [rec_coords[0].min()-100, rec_coords[0].max()+100],
            [rec_coords[1].min()-100, rec_coords[1].max()+100],
            [-5500, -2000]
        ),
    }









.. GENERATED FROM PYTHON SOURCE LINES 232-233

Now we can initiate the simulation class and QC it:

.. GENERATED FROM PYTHON SOURCE LINES 233-248

.. code-block:: default


    simulation = emg3d.simulations.Simulation(
        name="True Model",    # A name for this simulation
        survey=survey,        # Our survey instance
        model=model,          # The model
        gridding='both',      # Frequency- and source-dependent meshes
        max_workers=4,        # How many parallel jobs
        # solver_opts,        # Any parameter to pass to emg3d.solve
        gridding_opts=gopts,  # Gridding options
    )

    # Let's QC our Simulation instance
    simulation







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h3>Simulation «True Model»</h3><ul>  <li>Survey «GemPy-II Survey A»:    3 sources;    45 receivers;    2 frequencies</li>  <li>Model: resistivity; isotropic; 100 x 100 x 102 (1,020,000)</li>  <li>Gridding: Frequency- and source-dependent grids;     160 x 40 x 48 (307,200) - 192 x 48 x 64 (589,824)</li></ul>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 249-262

Compute the data
''''''''''''''''

We pass here the argument ``observed=True``; this way, the synthetic data is
stored in our Survey as ``observed`` data, otherwise it would be stored as
``synthetic``. This is important later for optimization. It also adds
Gaussian noise according to the noise floor and relative error we defined in
the survey. By setting a minimum offset the receivers close to the source are
switched off.

This computes all results in parallel; in this case six models, three sources
times two frequencies. You can change the number of workers at any time by
setting ``simulation.max_workers``.

.. GENERATED FROM PYTHON SOURCE LINES 262-266

.. code-block:: default


    simulation.compute(observed=True, min_offset=500)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compute efields:           0/6  [00:00]    Compute efields: #6        1/6  [01:35]    Compute efields: ########3 5/6  [01:42]    Compute efields: ##########6/6  [01:42]




.. GENERATED FROM PYTHON SOURCE LINES 267-282

A ``Simulation`` has a few convenience functions, e.g.:

- ``simulation.get_efield('TxED-1', 0.5)``: Returns the electric field of the
  entire domain for source ``'TxED-1'`` and frequency 0.5 Hz.
- ``simulation.get_hfield``; ``simulation.get_sfield``: Similar functions to
  retrieve the magnetic fields and the source fields.
- ``simulation.get_model``; ``simulation.get_grid``: Similar functions to
  retrieve the computational grid and the model for a given source and
  frequency.

When we now look at our survey we see that the observed data variable is
filled with the responses at the receiver locations. Note that the
``synthetic`` data is the actual computed data, the ``observed`` data, on the
other hand, has Gaussian noise added and is set to NaN's for positions too
close to the source.

.. GENERATED FROM PYTHON SOURCE LINES 282-286

.. code-block:: default


    survey







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h3>Survey «GemPy-II Survey A»</h3><div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2 {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:    (freq: 2, rec: 45, src: 3)
    Coordinates:
      * src        (src) &lt;U6 &#x27;TxED-1&#x27; &#x27;TxED-2&#x27; &#x27;TxED-3&#x27;
      * rec        (rec) &lt;U7 &#x27;RxEP-01&#x27; &#x27;RxEP-02&#x27; &#x27;RxEP-03&#x27; ... &#x27;RxEP-44&#x27; &#x27;RxEP-45&#x27;
      * freq       (freq) &lt;U3 &#x27;f-1&#x27; &#x27;f-2&#x27;
    Data variables:
        observed   (src, rec, freq) complex128 (-1.9881093039936688e-14-5.1325032...
        synthetic  (src, rec, freq) complex128 (-1.826678497953133e-14-5.42883141...
    Attributes:
        noise_floor:     1e-15
        relative_error:  0.05</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-a7f29136-148c-44ba-9daf-cb3c730ef716' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-a7f29136-148c-44ba-9daf-cb3c730ef716' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>freq</span>: 2</li><li><span class='xr-has-index'>rec</span>: 45</li><li><span class='xr-has-index'>src</span>: 3</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-cf349e95-db8e-4b5a-9a45-48829e0f3a89' class='xr-section-summary-in' type='checkbox'  checked><label for='section-cf349e95-db8e-4b5a-9a45-48829e0f3a89' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>src</span></div><div class='xr-var-dims'>(src)</div><div class='xr-var-dtype'>&lt;U6</div><div class='xr-var-preview xr-preview'>&#x27;TxED-1&#x27; &#x27;TxED-2&#x27; &#x27;TxED-3&#x27;</div><input id='attrs-b0e3ec1d-fb1e-4c7d-b739-752e06c8aeef' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-b0e3ec1d-fb1e-4c7d-b739-752e06c8aeef' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a81552de-4adf-4663-96ec-99e76b18fa69' class='xr-var-data-in' type='checkbox'><label for='data-a81552de-4adf-4663-96ec-99e76b18fa69' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Sources :</span></dt><dd>TxED-1: TxElectricDipole: 1.0 A;
        center={5,000.0; 7,500.0; -2,305.8} m; θ=0.0°, φ=0.0°; l=1.0 m;
    TxED-2: TxElectricDipole: 1.0 A;
        center={10,000.0; 7,500.0; -2,020.7} m; θ=0.0°, φ=0.0°; l=1.0 m;
    TxED-3: TxElectricDipole: 1.0 A;
        center={15,000.0; 7,500.0; -2,170.0} m; θ=0.0°, φ=0.0°; l=1.0 m.</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;TxED-1&#x27;, &#x27;TxED-2&#x27;, &#x27;TxED-3&#x27;], dtype=&#x27;&lt;U6&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>rec</span></div><div class='xr-var-dims'>(rec)</div><div class='xr-var-dtype'>&lt;U7</div><div class='xr-var-preview xr-preview'>&#x27;RxEP-01&#x27; &#x27;RxEP-02&#x27; ... &#x27;RxEP-45&#x27;</div><input id='attrs-a428b848-2915-4c5e-96ca-57f5401e85e4' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-a428b848-2915-4c5e-96ca-57f5401e85e4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2072e9b3-b387-4246-88ba-e18727dd66f2' class='xr-var-data-in' type='checkbox'><label for='data-2072e9b3-b387-4246-88ba-e18727dd66f2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Receivers :</span></dt><dd>RxEP-01: RxElectricPoint: absolute;
        x=3,000.0 m, y=6,500.0 m, z=-2,200.9 m, θ=0.0°, φ=0.0°;
    RxEP-02: RxElectricPoint: absolute;
        x=3,000.0 m, y=7,500.0 m, z=-2,220.0 m, θ=0.0°, φ=0.0°;
    RxEP-03: RxElectricPoint: absolute;
        x=3,000.0 m, y=8,500.0 m, z=-2,271.7 m, θ=0.0°, φ=0.0°;
    RxEP-04: RxElectricPoint: absolute;
        x=4,000.0 m, y=6,500.0 m, z=-2,185.2 m, θ=0.0°, φ=0.0°;
    RxEP-05: RxElectricPoint: absolute;
        x=4,000.0 m, y=7,500.0 m, z=-2,226.6 m, θ=0.0°, φ=0.0°;
    RxEP-06: RxElectricPoint: absolute;
        x=4,000.0 m, y=8,500.0 m, z=-2,207.7 m, θ=0.0°, φ=0.0°;
    RxEP-07: RxElectricPoint: absolute;
        x=5,000.0 m, y=6,500.0 m, z=-2,243.9 m, θ=0.0°, φ=0.0°;
    RxEP-08: RxElectricPoint: absolute;
        x=5,000.0 m, y=7,500.0 m, z=-2,355.8 m, θ=0.0°, φ=0.0°;
    RxEP-09: RxElectricPoint: absolute;
        x=5,000.0 m, y=8,500.0 m, z=-2,226.8 m, θ=0.0°, φ=0.0°;
    RxEP-10: RxElectricPoint: absolute;
        x=6,000.0 m, y=6,500.0 m, z=-2,181.3 m, θ=0.0°, φ=0.0°;
    RxEP-11: RxElectricPoint: absolute;
        x=6,000.0 m, y=7,500.0 m, z=-2,305.7 m, θ=0.0°, φ=0.0°;
    RxEP-12: RxElectricPoint: absolute;
        x=6,000.0 m, y=8,500.0 m, z=-2,272.6 m, θ=0.0°, φ=0.0°;
    RxEP-13: RxElectricPoint: absolute;
        x=7,000.0 m, y=6,500.0 m, z=-2,051.4 m, θ=0.0°, φ=0.0°;
    RxEP-14: RxElectricPoint: absolute;
        x=7,000.0 m, y=7,500.0 m, z=-2,108.8 m, θ=0.0°, φ=0.0°;
    RxEP-15: RxElectricPoint: absolute;
        x=7,000.0 m, y=8,500.0 m, z=-2,069.3 m, θ=0.0°, φ=0.0°;
    RxEP-16: RxElectricPoint: absolute;
        x=8,000.0 m, y=6,500.0 m, z=-2,050.1 m, θ=0.0°, φ=0.0°;
    RxEP-17: RxElectricPoint: absolute;
        x=8,000.0 m, y=7,500.0 m, z=-2,100.5 m, θ=0.0°, φ=0.0°;
    RxEP-18: RxElectricPoint: absolute;
        x=8,000.0 m, y=8,500.0 m, z=-2,025.0 m, θ=0.0°, φ=0.0°;
    RxEP-19: RxElectricPoint: absolute;
        x=9,000.0 m, y=6,500.0 m, z=-2,070.1 m, θ=0.0°, φ=0.0°;
    RxEP-20: RxElectricPoint: absolute;
        x=9,000.0 m, y=7,500.0 m, z=-2,098.6 m, θ=0.0°, φ=0.0°;
    RxEP-21: RxElectricPoint: absolute;
        x=9,000.0 m, y=8,500.0 m, z=-2,000.0 m, θ=0.0°, φ=0.0°;
    RxEP-22: RxElectricPoint: absolute;
        x=10,000.0 m, y=6,500.0 m, z=-1,997.0 m, θ=0.0°, φ=0.0°;
    RxEP-23: RxElectricPoint: absolute;
        x=10,000.0 m, y=7,500.0 m, z=-2,070.7 m, θ=0.0°, φ=0.0°;
    RxEP-24: RxElectricPoint: absolute;
        x=10,000.0 m, y=8,500.0 m, z=-2,016.3 m, θ=0.0°, φ=0.0°;
    RxEP-25: RxElectricPoint: absolute;
        x=11,000.0 m, y=6,500.0 m, z=-2,272.7 m, θ=0.0°, φ=0.0°;
    RxEP-26: RxElectricPoint: absolute;
        x=11,000.0 m, y=7,500.0 m, z=-2,300.7 m, θ=0.0°, φ=0.0°;
    RxEP-27: RxElectricPoint: absolute;
        x=11,000.0 m, y=8,500.0 m, z=-2,221.5 m, θ=0.0°, φ=0.0°;
    RxEP-28: RxElectricPoint: absolute;
        x=12,000.0 m, y=6,500.0 m, z=-2,401.2 m, θ=0.0°, φ=0.0°;
    RxEP-29: RxElectricPoint: absolute;
        x=12,000.0 m, y=7,500.0 m, z=-2,352.0 m, θ=0.0°, φ=0.0°;
    RxEP-30: RxElectricPoint: absolute;
        x=12,000.0 m, y=8,500.0 m, z=-2,345.6 m, θ=0.0°, φ=0.0°;
    RxEP-31: RxElectricPoint: absolute;
        x=13,000.0 m, y=6,500.0 m, z=-2,430.3 m, θ=0.0°, φ=0.0°;
    RxEP-32: RxElectricPoint: absolute;
        x=13,000.0 m, y=7,500.0 m, z=-2,301.3 m, θ=0.0°, φ=0.0°;
    RxEP-33: RxElectricPoint: absolute;
        x=13,000.0 m, y=8,500.0 m, z=-2,270.9 m, θ=0.0°, φ=0.0°;
    RxEP-34: RxElectricPoint: absolute;
        x=14,000.0 m, y=6,500.0 m, z=-2,295.0 m, θ=0.0°, φ=0.0°;
    RxEP-35: RxElectricPoint: absolute;
        x=14,000.0 m, y=7,500.0 m, z=-2,299.9 m, θ=0.0°, φ=0.0°;
    RxEP-36: RxElectricPoint: absolute;
        x=14,000.0 m, y=8,500.0 m, z=-2,272.3 m, θ=0.0°, φ=0.0°;
    RxEP-37: RxElectricPoint: absolute;
        x=15,000.0 m, y=6,500.0 m, z=-2,300.4 m, θ=0.0°, φ=0.0°;
    RxEP-38: RxElectricPoint: absolute;
        x=15,000.0 m, y=7,500.0 m, z=-2,220.0 m, θ=0.0°, φ=0.0°;
    RxEP-39: RxElectricPoint: absolute;
        x=15,000.0 m, y=8,500.0 m, z=-2,199.6 m, θ=0.0°, φ=0.0°;
    RxEP-40: RxElectricPoint: absolute;
        x=16,000.0 m, y=6,500.0 m, z=-2,257.7 m, θ=0.0°, φ=0.0°;
    RxEP-41: RxElectricPoint: absolute;
        x=16,000.0 m, y=7,500.0 m, z=-2,204.7 m, θ=0.0°, φ=0.0°;
    RxEP-42: RxElectricPoint: absolute;
        x=16,000.0 m, y=8,500.0 m, z=-2,199.7 m, θ=0.0°, φ=0.0°;
    RxEP-43: RxElectricPoint: absolute;
        x=17,000.0 m, y=6,500.0 m, z=-2,270.0 m, θ=0.0°, φ=0.0°;
    RxEP-44: RxElectricPoint: absolute;
        x=17,000.0 m, y=7,500.0 m, z=-2,273.8 m, θ=0.0°, φ=0.0°;
    RxEP-45: RxElectricPoint: absolute;
        x=17,000.0 m, y=8,500.0 m, z=-2,330.1 m, θ=0.0°, φ=0.0°.</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;RxEP-01&#x27;, &#x27;RxEP-02&#x27;, &#x27;RxEP-03&#x27;, &#x27;RxEP-04&#x27;, &#x27;RxEP-05&#x27;, &#x27;RxEP-06&#x27;,
           &#x27;RxEP-07&#x27;, &#x27;RxEP-08&#x27;, &#x27;RxEP-09&#x27;, &#x27;RxEP-10&#x27;, &#x27;RxEP-11&#x27;, &#x27;RxEP-12&#x27;,
           &#x27;RxEP-13&#x27;, &#x27;RxEP-14&#x27;, &#x27;RxEP-15&#x27;, &#x27;RxEP-16&#x27;, &#x27;RxEP-17&#x27;, &#x27;RxEP-18&#x27;,
           &#x27;RxEP-19&#x27;, &#x27;RxEP-20&#x27;, &#x27;RxEP-21&#x27;, &#x27;RxEP-22&#x27;, &#x27;RxEP-23&#x27;, &#x27;RxEP-24&#x27;,
           &#x27;RxEP-25&#x27;, &#x27;RxEP-26&#x27;, &#x27;RxEP-27&#x27;, &#x27;RxEP-28&#x27;, &#x27;RxEP-29&#x27;, &#x27;RxEP-30&#x27;,
           &#x27;RxEP-31&#x27;, &#x27;RxEP-32&#x27;, &#x27;RxEP-33&#x27;, &#x27;RxEP-34&#x27;, &#x27;RxEP-35&#x27;, &#x27;RxEP-36&#x27;,
           &#x27;RxEP-37&#x27;, &#x27;RxEP-38&#x27;, &#x27;RxEP-39&#x27;, &#x27;RxEP-40&#x27;, &#x27;RxEP-41&#x27;, &#x27;RxEP-42&#x27;,
           &#x27;RxEP-43&#x27;, &#x27;RxEP-44&#x27;, &#x27;RxEP-45&#x27;], dtype=&#x27;&lt;U7&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>freq</span></div><div class='xr-var-dims'>(freq)</div><div class='xr-var-dtype'>&lt;U3</div><div class='xr-var-preview xr-preview'>&#x27;f-1&#x27; &#x27;f-2&#x27;</div><input id='attrs-a5569a2d-238b-44c3-95fa-b44626302eda' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-a5569a2d-238b-44c3-95fa-b44626302eda' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4bd1454e-bcd8-472d-89fd-d3ee1adab21a' class='xr-var-data-in' type='checkbox'><label for='data-4bd1454e-bcd8-472d-89fd-d3ee1adab21a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>Frequencies :</span></dt><dd>f-1: 0.5 Hz;
    f-2: 1.0 Hz.</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;f-1&#x27;, &#x27;f-2&#x27;], dtype=&#x27;&lt;U3&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-7058db4e-429c-4f29-bcad-4d26668cc870' class='xr-section-summary-in' type='checkbox'  checked><label for='section-7058db4e-429c-4f29-bcad-4d26668cc870' class='xr-section-summary' >Data variables: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>observed</span></div><div class='xr-var-dims'>(src, rec, freq)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>(-1.9881093039936688e-14-5.13250...</div><input id='attrs-7bcab0a6-0e00-439a-a7a0-8c310c22564e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7bcab0a6-0e00-439a-a7a0-8c310c22564e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7af9ec80-67ae-448d-b245-4fa439043347' class='xr-var-data-in' type='checkbox'><label for='data-7af9ec80-67ae-448d-b245-4fa439043347' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[-1.98810930e-14-5.13250328e-13j,
             -3.17757697e-13-4.54604234e-14j],
            [-4.10737808e-13-1.51309132e-12j,
             -9.36025418e-13-2.34628226e-13j],
            [-1.36511826e-14-4.14834993e-13j,
             -2.70182850e-13-6.70607868e-14j],
            [-1.05954069e-12+5.20941987e-12j,
              2.42374226e-12+9.86548811e-13j],
            [ 1.96357597e-11-2.48929859e-11j,
              9.04935190e-12-2.29168176e-11j],
            [-6.56716596e-13+3.91273240e-12j,
              2.34218714e-12+9.80984270e-13j],
            [-3.91829097e-11+3.58368148e-11j,
             -4.73052540e-12+3.95916978e-11j],
            [            nan           +nanj,
                         nan           +nanj],
            [-3.43706687e-11+3.38899484e-11j,
             -1.92821736e-12+4.12210746e-11j],
            [-9.61708236e-13+4.33322046e-12j,
              2.11012211e-12+5.89547003e-13j],
    ...
            [-1.51806027e-12+4.50781901e-12j,
              2.05112626e-12+1.66679662e-12j],
            [-4.27814186e-11+3.58921221e-11j,
             -8.58432868e-12+3.73399327e-11j],
            [            nan           +nanj,
                         nan           +nanj],
            [-3.96595451e-11+3.77382623e-11j,
             -4.57425066e-12+4.05802703e-11j],
            [-4.45565643e-13+5.36088332e-12j,
              2.91486855e-12+1.21891514e-12j],
            [ 2.35843671e-11-2.43294942e-11j,
              1.13328267e-11-2.11715933e-11j],
            [-1.10169546e-12+5.16909619e-12j,
              2.69098699e-12+1.25638243e-12j],
            [ 5.07520263e-14-5.68145230e-13j,
             -3.48341097e-13-1.34384065e-13j],
            [-1.09534964e-13-1.92038153e-12j,
             -9.83455016e-13-7.97030705e-13j],
            [ 1.58909855e-13-5.68016621e-13j,
             -3.62428350e-13-2.51083177e-13j]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>synthetic</span></div><div class='xr-var-dims'>(src, rec, freq)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>(-1.826678497953133e-14-5.428831...</div><input id='attrs-5613eda4-aa9f-4d48-bdc3-99122e3755a2' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5613eda4-aa9f-4d48-bdc3-99122e3755a2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2e4e40e1-7264-42f3-b1ab-682b1ce15b0b' class='xr-var-data-in' type='checkbox'><label for='data-2e4e40e1-7264-42f3-b1ab-682b1ce15b0b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[-1.82667850e-14-5.42883142e-13j,
             -3.30864873e-13-4.68624680e-14j],
            [-3.39411739e-13-1.54192259e-12j,
             -8.78107662e-13-2.76880604e-13j],
            [-1.55023099e-14-4.21818749e-13j,
             -2.78103128e-13-4.44467021e-14j],
            [-9.48934127e-13+4.91353803e-12j,
              2.59302060e-12+1.17080986e-12j],
            [ 1.97283683e-11-2.61420795e-11j,
              8.18768917e-12-2.11752353e-11j],
            [-9.98759419e-13+3.82124032e-12j,
              2.21867000e-12+1.02226384e-12j],
            [-4.08554404e-11+3.58543591e-11j,
             -6.00598908e-12+4.13111035e-11j],
            [-3.63605320e-08-2.73889654e-09j,
             -3.70450679e-08-5.07111300e-09j],
            [-4.10608112e-11+3.69559194e-11j,
             -5.34122545e-12+4.19044932e-11j],
            [-7.61290259e-13+4.08380667e-12j,
              2.08275197e-12+8.21298180e-13j],
    ...
            [-1.60212176e-12+4.72853150e-12j,
              2.22345046e-12+1.60668318e-12j],
            [-4.35140896e-11+3.67098347e-11j,
             -8.16618833e-12+4.32514912e-11j],
            [-3.37500504e-08-2.79747758e-09j,
             -3.45337087e-08-5.17024908e-09j],
            [-4.33368594e-11+3.82879654e-11j,
             -6.58591917e-12+4.37034224e-11j],
            [-7.20029872e-13+5.19530656e-12j,
              2.93495111e-12+1.16094520e-12j],
            [ 2.52101120e-11-2.64421723e-11j,
              1.41534516e-11-2.31189962e-11j],
            [-1.12199571e-12+4.71707873e-12j,
              2.65321159e-12+1.27539499e-12j],
            [ 6.43692632e-14-5.76766510e-13j,
             -3.64366052e-13-1.44905171e-13j],
            [-7.00003428e-15-1.93475408e-12j,
             -1.01827583e-12-6.87864445e-13j],
            [ 1.43489102e-13-6.33190446e-13j,
             -3.71980671e-13-2.49818332e-13j]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-50e34295-21bb-493a-a50e-983b952a2c2c' class='xr-section-summary-in' type='checkbox'  checked><label for='section-50e34295-21bb-493a-a50e-983b952a2c2c' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>noise_floor :</span></dt><dd>1e-15</dd><dt><span>relative_error :</span></dt><dd>0.05</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 287-289

QC Data
-------

.. GENERATED FROM PYTHON SOURCE LINES 289-320

.. code-block:: default


    plt.figure()
    plt.title("Inline receivers for all sources")
    obs = simulation.data.observed[:, 1::3, :]
    syn = simulation.data.synthetic[:, 1::3, :]
    for i, src in enumerate(survey.sources.keys()):
        for ii, freq in enumerate(survey.frequencies):
            plt.plot(rec_coords[0][1::3],
                     abs(syn.loc[src, :, freq].data.real),
                     "k-", lw=0.5)
            plt.plot(rec_coords[0][1::3],
                     abs(syn.loc[src, :, freq].data.imag),
                     "k-", lw=0.5)
            plt.plot(rec_coords[0][1::3],
                     abs(obs.loc[src, :, freq].data.real),
                     f"C{ii}.-",
                     label=f"|Real|; freq={freq} Hz" if i == 0 else None
                     )
            plt.plot(rec_coords[0][1::3],
                     abs(obs.loc[src, :, freq].data.imag),
                     f"C{ii}.--",
                     label=f"|Imag|; freq={freq} Hz" if i == 0 else None
                     )

    plt.yscale('log')
    plt.legend(ncol=2, framealpha=1)
    plt.xlabel('x-coordinate (m)')
    plt.ylabel('$|E_x|$ (V/m)')
    plt.show()





.. image:: /gallery/tutorials/images/sphx_glr_simulation_002.png
    :alt: Inline receivers for all sources
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 321-331

How to store surveys and simulations to disk
--------------------------------------------

Survey and Simulations can store (and load) themselves to (from) disk.

- A survey stores all sources, receivers, frequencies, and the observed data.
- A simulation stores the survey, the model, the synthetic data. (It can also
  store much more, such as all electric fields, source and frequency
  dependent meshes and models, etc. What it actually stores is defined by the
  parameter ``what``).

.. GENERATED FROM PYTHON SOURCE LINES 331-352

.. code-block:: default


    # Survey file name
    # survey_fname = 'GemPy-II-survey-A.h5'

    # To store, run
    # survey.to_file(survey_fname)  # .h5, .json, or .npz

    # To load, run
    # survey = emg3d.surveys.Survey.from_file(survey_fname)

    # In the same manner you could store and load the entire simulation:

    # Simulation file name
    # simulation_fname = file-name.ending  # for ending in [h5, json, npz]

    # To store, run
    # simulation.to_file(simulation_fname, what='results')

    # To load, run
    # simulation = emg3d.simulations.Simulation.from_file(simulation_fname)








.. GENERATED FROM PYTHON SOURCE LINES 353-355

.. code-block:: default


    emg3d.Report()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='border: 3px solid #ddd;'>
      <tr>
         <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Sat Jul 17 17:52:16 2021 CEST</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
        <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
        <td style='text-align: left; border: 2px solid #fff;'>4</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
        <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
        <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
        <td style='text-align: left; border: 2px solid #fff;'>15.5 GiB</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
        <td style='text-align: left; border: 2px solid #fff;'>Python</td>
      </tr>
      <tr>
         <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.9.4 | packaged by conda-forge | (default, May 10 2021, 22:13:33) 
    [GCC 9.3.0]</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.21.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numba</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.53.1</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>emg3d</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.1.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>empymod</td>
        <td style='text-align: left; border: 2px solid #fff;'>2.1.2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>xarray</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.18.2</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>h5py</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.3.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.4.2</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>tqdm</td>
        <td style='text-align: left; border: 2px solid #fff;'>4.61.2</td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
      </tr>
      <tr>
         <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications</td>
      </tr>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  50.458 seconds)

**Estimated memory usage:**  187 MB


.. _sphx_glr_download_gallery_tutorials_simulation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: simulation.py <simulation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: simulation.ipynb <simulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
