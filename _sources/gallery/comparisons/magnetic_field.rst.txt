
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/comparisons/magnetic_field.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_comparisons_magnetic_field.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_comparisons_magnetic_field.py:


6. Magnetic field due to an el. source
======================================

The solver ``emg3d`` returns the electric field in x-, y-, and z-direction.
Using Farady's law of induction we can obtain the magnetic field from it.
Faraday's law of induction in the frequency domain can be written as, in its
differential form,

.. math::
    :label: faraday

    \nabla \times \mathbf{E} = \rm{i}\omega \mathbf{B} =
    \rm{i}\omega\mu\mathbf{H}\, .

This is exactly what we do in this example, for a rotated finite length bipole
in a homogeneous VTI fullspace, and compare it to the semi-analytical solution
of ``empymod``. (The code ``empymod`` is an open-source code which can model
CSEM responses for a layered medium including VTI electrical anisotropy, see
`emsig.xyz <https://emsig.xyz>`_.)

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: default

    import emg3d
    import empymod
    import numpy as np
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 31-36

Full-space model for a finite length, finite strength, rotated bipole
---------------------------------------------------------------------

In order to shorten the build-time of the gallery we use a coarse model.
Set ``coarse_model = False`` to obtain a result of higher accuracy.

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default

    coarse_model = True









.. GENERATED FROM PYTHON SOURCE LINES 40-42

Survey and model parameters
```````````````````````````

.. GENERATED FROM PYTHON SOURCE LINES 42-68

.. code-block:: default


    # Receiver coordinates
    if coarse_model:
        x = (np.arange(256))*20-2550
    else:
        x = (np.arange(1025))*5-2560
    rx = np.repeat([x, ], np.size(x), axis=0)
    ry = rx.transpose()
    frx, fry = rx.ravel(), ry.ravel()
    rz = -400.0
    azimuth = 30
    elevation = 10

    # Source coordinates, frequency, and strength
    source = emg3d.TxElectricDipole(
        coordinates=[-50, 50, -30, 30, -320., -280.],  # [x1, x2, y1, y2, z1, z2]
        strength=3.3,  # A
    )
    frequency = 0.8  # Hz

    # Model parameters
    h_res = 1.              # Horizontal resistivity
    aniso = np.sqrt(2.)     # Anisotropy
    v_res = h_res*aniso**2  # Vertical resistivity









.. GENERATED FROM PYTHON SOURCE LINES 69-73

empymod
```````
Note: The coordinate system of empymod is positive z down, for emg3d it is
positive z up. We have to switch therefore src_z, rec_z, and elevation.

.. GENERATED FROM PYTHON SOURCE LINES 73-89

.. code-block:: default


    # Compute
    epm = empymod.bipole(
        src=np.r_[source.coordinates[:4], -source.coordinates[4:]],
        rec=[frx, fry, -rz, azimuth, -elevation],
        depth=[],
        res=h_res,
        aniso=aniso,
        strength=source.strength,
        srcpts=5,
        freqtime=frequency,
        htarg={'pts_per_dec': -1},
        mrec=True,
        verb=3,
    ).reshape(np.shape(rx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    :: empymod START  ::  v2.1.2

       depth       [m] :  
       res     [Ohm.m] :  1
       aniso       [-] :  1.41421
       epermH      [-] :  1
       epermV      [-] :  1
       mpermH      [-] :  1
       mpermV      [-] :  1

    >  MODEL IS A FULLSPACE
       direct field    :  Comp. in wavenumber domain
       frequency  [Hz] :  0.8
       Hankel          :  DLF (Fast Hankel Transform)
         > Filter      :  Key 201 (2009)
         > DLF type    :  Lagged Convolution
       Loop over       :  Frequencies
       Source(s)       :  1 bipole(s)
         > intpts      :  5
         > length  [m] :  123.288
         > strength[A] :  3.3
         > x_c     [m] :  0
         > y_c     [m] :  0
         > z_c     [m] :  300
         > azimuth [°] :  30.9638
         > dip     [°] :  -18.9318
       Receiver(s)     :  65536 dipole(s)
         > x       [m] :  -2550 - 2550 : 65536  [min-max; #]
         > y       [m] :  -2550 - 2550 : 65536  [min-max; #]
         > z       [m] :  400
         > azimuth [°] :  30
         > dip     [°] :  -10
       Required ab's   :  14 24 34 15 25 35 16 26 36

    :: empymod END; runtime = 0:00:00.914963 :: 40 kernel call(s)





.. GENERATED FROM PYTHON SOURCE LINES 90-92

emg3d
`````

.. GENERATED FROM PYTHON SOURCE LINES 92-113

.. code-block:: default


    if coarse_model:
        min_width_limits = 40
        stretching = [1.045, 1.045]
    else:
        min_width_limits = 20
        stretching = [1.03, 1.045]

    # Create stretched grid
    grid = emg3d.construct_mesh(
        frequency=frequency,
        properties=h_res,
        center=source.center,
        domain=([-2500, 2500], [-2500, 2500], [-2900, 2100]),
        min_width_limits=min_width_limits,
        stretching=stretching,
        lambda_from_center=True,
        lambda_factor=0.8,
    )
    grid






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr>
        <td style='font-weight: bold; font-size: 1.2em; text-align: center;' colspan='3'>TensorMesh</td>
        <td style='font-size: 1.2em; text-align: center;'colspan='4'>512,000 cells</td>
      </tr>
      <tr>
        <th></th>
        <th></th>
        <th colspan='2' style='padding: 5px 20px 5px 20px;'>MESH EXTENT</th>
        <th colspan='2' style='padding: 5px 20px 5px 20px;'>CELL WIDTH</th>
        <th style='padding: 5px 20px 5px 20px;'>FACTOR</th>
      </tr>
      <tr>
        <th style='padding: 5px 20px 5px 20px;'>dir</th>
        <th style='padding: 5px 20px 5px 20px;'>nC</th>
        <th style='padding: 5px 20px 5px 20px;'>min</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
        <th style='padding: 5px 20px 5px 20px;'>min</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>x</td>
        <td style='padding: 5px 20px 5px 20px;'>80</td>
        <td style='padding: 5px 20px 5px 20px;'>-4,085.78</td>
        <td style='padding: 5px 20px 5px 20px;'>4,085.78</td>
        <td style='padding: 5px 20px 5px 20px;'>40.00</td>
        <td style='padding: 5px 20px 5px 20px;'>209.22</td>
        <td style='padding: 5px 20px 5px 20px;'>1.05</td>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>y</td>
        <td style='padding: 5px 20px 5px 20px;'>80</td>
        <td style='padding: 5px 20px 5px 20px;'>-4,085.78</td>
        <td style='padding: 5px 20px 5px 20px;'>4,085.78</td>
        <td style='padding: 5px 20px 5px 20px;'>40.00</td>
        <td style='padding: 5px 20px 5px 20px;'>209.22</td>
        <td style='padding: 5px 20px 5px 20px;'>1.05</td>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>z</td>
        <td style='padding: 5px 20px 5px 20px;'>80</td>
        <td style='padding: 5px 20px 5px 20px;'>-4,475.20</td>
        <td style='padding: 5px 20px 5px 20px;'>3,875.20</td>
        <td style='padding: 5px 20px 5px 20px;'>40.00</td>
        <td style='padding: 5px 20px 5px 20px;'>214.10</td>
        <td style='padding: 5px 20px 5px 20px;'>1.04</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 114-122

.. code-block:: default


    # Define the model
    model = emg3d.Model(
        grid, property_x=h_res, property_z=v_res, mapping='Resistivity')

    # Compute the electric field
    efield = emg3d.solve_source(model, source, frequency, verb=4, plain=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    :: emg3d START :: 18:19:09 :: v1.1.0

       MG-cycle       : 'F'                 sslsolver : False
       semicoarsening : False [0]           tol       : 1e-06
       linerelaxation : False [0]           maxit     : 50
       nu_{i,1,c,2}   : 0, 2, 1, 2          verb      : 4
       Original grid  :  80 x  80 x  80     => 512,000 cells
       Coarsest grid  :   5 x   5 x   5     => 125 cells
       Coarsest level :   4 ;   4 ;   4   

       [hh:mm:ss]  rel. error                  [abs. error, last/prev]   l s

           h_
          2h_ \                  /
          4h_  \          /\    / 
          8h_   \    /\  /  \  /  
         16h_    \/\/  \/    \/   

       [18:19:14]   3.475e-02  after   1 F-cycles   [3.307e-05, 0.035]   0 0
       [18:19:17]   3.660e-03  after   2 F-cycles   [3.483e-06, 0.105]   0 0
       [18:19:21]   4.959e-04  after   3 F-cycles   [4.719e-07, 0.136]   0 0
       [18:19:25]   7.541e-05  after   4 F-cycles   [7.177e-08, 0.152]   0 0
       [18:19:29]   1.236e-05  after   5 F-cycles   [1.176e-08, 0.164]   0 0
       [18:19:33]   2.320e-06  after   6 F-cycles   [2.208e-09, 0.188]   0 0
       [18:19:37]   6.938e-07  after   7 F-cycles   [6.603e-10, 0.299]   0 0

       > CONVERGED
       > MG cycles        : 7
       > Final rel. error : 6.938e-07

    :: emg3d END   :: 18:19:37 :: runtime = 0:00:27





.. GENERATED FROM PYTHON SOURCE LINES 123-125

Compute magnetic field :math:`H` from the electric field
--------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 125-131

.. code-block:: default

    hfield = emg3d.get_magnetic_field(model, efield)

    # Get responses at receivers
    e3d = hfield.get_receiver((rx, ry, rz, azimuth, elevation))









.. GENERATED FROM PYTHON SOURCE LINES 132-134

Plot
````

.. GENERATED FROM PYTHON SOURCE LINES 134-191

.. code-block:: default



    # Start figure.
    a_kwargs = {'cmap': "viridis", 'vmin': -10, 'vmax': -4, 'shading': 'nearest'}

    e_kwargs = {'cmap': plt.cm.get_cmap("RdBu_r", 8),
                'vmin': -2, 'vmax': 2, 'shading': 'nearest'}

    fig, axs = plt.subplots(2, 3, figsize=(10, 5.5), sharex=True, sharey=True,
                            subplot_kw={'box_aspect': 1})

    ((ax1, ax2, ax3), (ax4, ax5, ax6)) = axs
    x3 = x/1000  # km

    # Plot Re(data)
    ax1.set_title(r"(a) |Re(empymod)|")
    cf0 = ax1.pcolormesh(x3, x3, np.log10(epm.real.amp()), **a_kwargs)

    ax2.set_title(r"(b) |Re(emg3d)|")
    ax2.pcolormesh(x3, x3, np.log10(e3d.real.amp()), **a_kwargs)

    ax3.set_title(r"(c) Error real part")
    rel_error = 100*np.abs((epm.real - e3d.real) / epm.real)
    cf2 = ax3.pcolormesh(x3, x3, np.log10(rel_error), **e_kwargs)

    # Plot Im(data)
    ax4.set_title(r"(d) |Im(empymod)|")
    ax4.pcolormesh(x3, x3, np.log10(epm.imag.amp()), **a_kwargs)

    ax5.set_title(r"(e) |Im(emg3d)|")
    ax5.pcolormesh(x3, x3, np.log10(e3d.imag.amp()), **a_kwargs)

    ax6.set_title(r"(f) Error imaginary part")
    rel_error = 100*np.abs((epm.imag - e3d.imag) / epm.imag)
    ax6.pcolormesh(x3, x3, np.log10(rel_error), **e_kwargs)

    # Colorbars
    fig.colorbar(cf0, ax=axs[0, :], label=r"$\log_{10}$ Amplitude (A/m)")
    cbar = fig.colorbar(cf2, ax=axs[1, :], label=r"Relative Error")
    cbar.set_ticks([-2, -1, 0, 1, 2])
    cbar.ax.set_yticklabels([r"$0.01\,\%$", r"$0.1\,\%$", r"$1\,\%$",
                             r"$10\,\%$", r"$100\,\%$"])

    ax1.set_xlim(min(x3), max(x3))
    ax1.set_ylim(min(x3), max(x3))

    # Axis label
    fig.text(0.4, 0.05, "Inline Offset (km)", fontsize=14)
    fig.text(0.05, 0.3, "Crossline Offset (km)", rotation=90, fontsize=14)
    fig.suptitle(r'Diffusive Fullspace, $H$-field', y=1, fontsize=20)

    print(f"- Source: {source}")
    print(f"- Frequency: {frequency} Hz")
    print(f"- Magnetic receivers: z={rz} m; θ={azimuth}°, φ={elevation}°")

    fig.show()




.. image:: /gallery/comparisons/images/sphx_glr_magnetic_field_001.png
    :alt: Diffusive Fullspace, $H$-field, (a) |Re(empymod)|, (b) |Re(emg3d)|, (c) Error real part, (d) |Im(empymod)|, (e) |Im(emg3d)|, (f) Error imaginary part
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    - Source: TxElectricDipole: 3.3 A;
        e1={-50.0; -30.0; -320.0} m; e2={50.0; 30.0; -280.0} m
    - Frequency: 0.8 Hz
    - Magnetic receivers: z=-400.0 m; θ=30°, φ=10°




.. GENERATED FROM PYTHON SOURCE LINES 192-193

.. code-block:: default

    emg3d.Report()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='border: 3px solid #ddd;'>
      <tr>
         <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Sat Jul 17 18:19:40 2021 CEST</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
        <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
        <td style='text-align: left; border: 2px solid #fff;'>4</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
        <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
        <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
        <td style='text-align: left; border: 2px solid #fff;'>15.5 GiB</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
        <td style='text-align: left; border: 2px solid #fff;'>Python</td>
      </tr>
      <tr>
         <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.9.4 | packaged by conda-forge | (default, May 10 2021, 22:13:33) 
    [GCC 9.3.0]</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.21.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numba</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.53.1</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>emg3d</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.1.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>empymod</td>
        <td style='text-align: left; border: 2px solid #fff;'>2.1.2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>xarray</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.18.2</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>h5py</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.3.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.4.2</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>tqdm</td>
        <td style='text-align: left; border: 2px solid #fff;'>4.61.2</td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
      </tr>
      <tr>
         <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications</td>
      </tr>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  33.709 seconds)

**Estimated memory usage:**  112 MB


.. _sphx_glr_download_gallery_comparisons_magnetic_field.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: magnetic_field.py <magnetic_field.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: magnetic_field.ipynb <magnetic_field.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
