r"""
2. Magnetic source using an el. loop
====================================

Computing the :math:`E` and :math:`H` fields generated by a magnetic source

We know that we can get the magnetic fields from the electric fields using
Faraday's law, see :ref:`sphx_glr_gallery_magnetics_magnetic_field.py`.

However, what about computing the fields generated by a magnetic source?
There are two ways we can achieve that:

- **creating an electric loop source**, which is what we do in this example,
  or
- using the duality principle, see
  :ref:`sphx_glr_gallery_magnetics_magnetic_source_duality.py`.

We create a "magnetic dipole" through an electric loop perpendicular to the
defined dipole in a homogeneous VTI fullspace, and compare it to the
semi-analytical solution of ``empymod``. (The code ``empymod`` is an
open-source code which can model CSEM responses for a layered medium including
VTI electrical anisotropy, see `emsig.xyz <https://emsig.xyz>`_.)

.. note::

    You also have to download the file
    :ref:`sphx_glr_gallery_magnetics_plot_magnetics.py` and place it in the
    same directory as this example.

"""
import emg3d
import empymod
import numpy as np
import plot_magnetics as plot  # <= See *Note* above.
# sphinx_gallery_thumbnail_path = '_static/thumbs/el-loop.png'


###############################################################################
# Full-space model for a loop dipole
# ----------------------------------
#
# In order to shorten the build-time of the gallery we use here a coarse model,
# which will result in bigger errors. If you want better results run the finer
# model.
coarse_model = True


###############################################################################
# Survey and model parameters
# ```````````````````````````
# ``emg3d.TxMagneticDipole`` creates an electric square loop perpendicular to
# the defined dipole, where the area of the square loop corresponds to the
# length of the dipole.

# Receiver coordinates
if coarse_model:
    x = (np.arange(256))*20-2550
else:
    x = (np.arange(1025))*5-2560
rx = np.repeat([x, ], np.size(x), axis=0)
ry = rx.transpose()
frx, fry = rx.ravel(), ry.ravel()
rz = -400.0

# Source coordinates, frequency, and strength
source = emg3d.TxMagneticDipole(
    coordinates=[-0.5, 0.5, -0.3, 0.3, -300.5, -299.5],  # [x1,x2,y1,y2,z1,z2]
    strength=np.pi,  # A
)
frequency = 0.77  # Hz

# Model parameters
h_res = 1.              # Horizontal resistivity
aniso = np.sqrt(2.)     # Anisotropy
v_res = h_res*aniso**2  # Vertical resistivity


###############################################################################
# empymod
# ```````
# Note: The coordinate system of empymod is positive z down, for emg3d it is
# positive z up. We have to switch therefore src_z, rec_z, and dip.

# Collect common input for empymod.
inp = {
    'src': np.r_[source.coordinates[:4], -source.coordinates[4:]],
    'depth': [],
    'res': h_res,
    'aniso': aniso,
    'strength': source.strength,
    'freqtime': frequency,
    'htarg': {'pts_per_dec': -1},
}

# Compute e-field
epm_ex = -empymod.loop(
    rec=[frx, fry, -rz, 0, 0], mrec=False, verb=3, **inp
).reshape(np.shape(rx))
epm_ey = -empymod.loop(
    rec=[frx, fry, -rz, 90, 0], mrec=False, **inp
).reshape(np.shape(rx))
epm_ez = -empymod.loop(
    rec=[frx, fry, -rz, 90, -90], mrec=False, **inp
).reshape(np.shape(rx))

#  Compute h-field
epm_hx = -empymod.loop(
    rec=[frx, fry, -rz, 0, 0], **inp).reshape(np.shape(rx))
epm_hy = -empymod.loop(
    rec=[frx, fry, -rz, 90, 0], **inp).reshape(np.shape(rx))
epm_hz = -empymod.loop(
    rec=[frx, fry, -rz, 0, -90], **inp).reshape(np.shape(rx))


###############################################################################
# emg3d
# `````

if coarse_model:
    min_width_limits = 40
    stretching = [1.045, 1.045]
else:
    min_width_limits = 20
    stretching = [1.03, 1.045]

# Create stretched grid
grid = emg3d.construct_mesh(
    frequency=frequency,
    properties=h_res,
    center=source.center,
    domain=([-2500, 2500], [-2500, 2500], [-2900, 2100]),
    min_width_limits=min_width_limits,
    stretching=stretching,
    lambda_from_center=True,
    lambda_factor=0.8,
)
grid

###############################################################################

# Define the model
model = emg3d.Model(
    grid, property_x=h_res, property_z=v_res, mapping='Resistivity')

# Compute the electric field
efield = emg3d.solve_source(model, source, frequency, verb=4, plain=True)

###############################################################################
# Compare the electric field generated from the magnetic source
# -------------------------------------------------------------
e3d_ex = efield.get_receiver((rx, ry, rz, 0, 0))
plot.plot_sections(
        epm_ex, e3d_ex, x, r'Diffusive Fullspace $E_x$',
        vmin=-17, vmax=-10, mode='abs'
)

###############################################################################
e3d_ey = efield.get_receiver((rx, ry, rz, 90, 0))
plot.plot_sections(
        epm_ey, e3d_ey, x, r'Diffusive Fullspace $E_y$',
        vmin=-17, vmax=-10, mode='abs'
)

###############################################################################
e3d_ez = efield.get_receiver((rx, ry, rz, 0, 90))
plot.plot_sections(
        epm_ez, e3d_ez, x, r'Diffusive Fullspace $E_z$',
        vmin=-17, vmax=-10, mode='abs'
)

###############################################################################
# Compare the magnetic field generated from the magnetic source
# -------------------------------------------------------------

# Get the magnetic field :math:`H` from the electric field
hfield = emg3d.get_magnetic_field(model, efield)

###############################################################################
e3d_hx = hfield.get_receiver((rx, ry, rz, 0, 0))
plot.plot_sections(
        epm_hx, e3d_hx, x, r'Diffusive Fullspace $H_x$',
        vmin=-13, vmax=-8, mode='abs'
)

###############################################################################
e3d_hy = hfield.get_receiver((rx, ry, rz, 90, 0))
plot.plot_sections(
        epm_hy, e3d_hy, x, r'Diffusive Fullspace $H_y$',
        vmin=-13, vmax=-8, mode='abs'
)

###############################################################################
e3d_hz = hfield.get_receiver((rx, ry, rz, 0, 90))
plot.plot_sections(
        epm_hz, e3d_hz, x, r'Diffusive Fullspace $H_z$',
        vmin=-13, vmax=-8, mode='abs'
)

###############################################################################
plot.plot_line(x, x, e3d_hx.real, epm_hx.real, grid, 'H_x')

###############################################################################
# The line-plot clearly shows the high error close to the source, due to our
# coarse meshing. By choosing a finer mesh at the center we can reduce this
# error significantly, at the cost of computational time.

emg3d.Report()
