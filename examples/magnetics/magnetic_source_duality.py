r"""
3. Magnetic source using duality
================================

Computing the :math:`E` and :math:`H` fields from a magnetic source using the
duality principle.

We know that we can get the magnetic fields from the electric fields using
Faraday's law, see :ref:`sphx_glr_gallery_magnetics_magnetic_field.py`.

However, what about computing the fields generated by a magnetic source?
There are two ways we can achieve that:

- **using the duality principle**, which is what we do in this example, or
- creating an electric loop source, see
  :ref:`sphx_glr_gallery_magnetics_magnetic_source_el_loop.py`.

``emg3d`` solves the following equation,

.. math::
    :label: maxwell

     \eta \mathbf{\hat{E}} - \nabla \times \zeta^{-1} \nabla \times
     \mathbf{\hat{E}} = -\mathbf{\hat{J}}^e_s ,

where :math:`\eta = \sigma - \mathrm{i}\omega\varepsilon`, :math:`\zeta =
\mathrm{i}\omega\mu`, :math:`\sigma` is conductivity (S/m), :math:`\omega=2\pi
f` is the angular frequency (Hz), :math:`\mu=\mu_0\mu_\mathrm{r}` is magnetic
permeability (H/m), :math:`\varepsilon=\varepsilon_0\varepsilon_\mathrm{r}` is
electric permittivity (F/m), :math:`\mathbf{\hat{E}}` the electric field in the
frequency domain (V/m), and  :math:`\mathbf{\hat{J}}^e_s` source current.

This is the electric field due to an electric source. One can obtain the
magnetic field due to a magnetic field by substituting

- :math:`\eta \leftrightarrow -\zeta` ,
- :math:`\mathbf{\hat{E}} \leftrightarrow -\mathbf{\hat{H}}` ,
- :math:`\mathbf{\hat{J}}^e_s \leftrightarrow \mathbf{\hat{J}}^m_s` ,

which is called the **duality principle**.

Carrying out the substitution yields

.. math::
    :label: dualdip

    \zeta \mathbf{\hat{H}} - \nabla \times \eta^{-1} \nabla \times
    \mathbf{\hat{H}} = -\mathbf{\hat{J}}^m_s ,

which is for a magnetic dipole. Changing it for a loop source adds a term
:math:`\mathrm{i}\omega\mu` to the source term, resulting in

.. math::
    :label: dualloop

    \zeta \mathbf{\hat{H}} - \nabla \times \eta^{-1} \nabla \times
    \mathbf{\hat{H}} = -\mathrm{i}\omega\mu\mathbf{\hat{J}}^m_s ;

see `Dipoles and Loops
<https://empymod.emsig.xyz/en/stable/examples/educational/dipoles_and_loops.html>`_
for more information.

``emg3d`` is not ideal for the duality principle. Magnetic permeability is
implemented isotropically, and discontinuities in magnetic permeabilities can
lead to first-order errors in contrary to second-order errors for
discontinuities in conductivity. However, we can still abuse the code and use
it with the duality principle, at least for isotropic media.

The actual implemented equation in ``emg3d`` is a slightly modified version of
Equation :eq:`maxwell`, using the diffusive approximation
:math:`\varepsilon=0`,

.. math::
    :label: dualdiff

    \mathrm{i}\omega \mu_0 \sigma \mathbf{\hat{E}} - \nabla \times
    \mu_r^{-1} \nabla \times \mathbf{\hat{E}} =
    -\mathrm{i}\omega\mu_0\mathbf{\hat{J}}_s .

We therefore only need to interchange :math:`\sigma` with
:math:`\mu_\mathrm{r}^{-1}` or :math:`\rho` with :math:`\mu_\mathrm{r}` to get
from :eq:`dualdiff` to :eq:`dualloop`.

This is what we do in this example, for an arbitrarily rotated loop in a
homogeneous, isotropic fullspace. We compare the result to the semi-analytical
solution of ``empymod``. (The code ``empymod`` is an open-source code which can
model CSEM responses for a layered medium including VTI electrical anisotropy,
see `emsig.xyz <https://emsig.xyz>`_.)

.. note::

    You also have to download the file
    :ref:`sphx_glr_gallery_magnetics_plot_magnetics.py` and place it in the
    same directory as this example.

"""
import emg3d
import empymod
import numpy as np
import plot_magnetics as plot  # <= See *Note* above.
# sphinx_gallery_thumbnail_path = '_static/thumbs/duality.png'


###############################################################################
# Full-space model for a rotated magnetic loop
# --------------------------------------------
#
# In order to shorten the build-time of the gallery we use here a coarse model,
# which will result in bigger errors. If you want better results run the finer
# model.
coarse_model = True


###############################################################################
# Survey and model parameters
# ```````````````````````````

# Receiver coordinates
if coarse_model:
    x = (np.arange(256))*20-2550
else:
    x = (np.arange(1025))*5-2560
rx = np.repeat([x, ], np.size(x), axis=0)
ry = rx.transpose()
frx, fry = rx.ravel(), ry.ravel()
rz = -400.0

# Source coordinates, frequency, and strength
source = emg3d.TxElectricDipole(
    coordinates=[0, 0, -300, 10, 70],  # [x, y, z, azimuth, elevation]
    strength=np.pi,  # A
)
frequency = 0.77  # Hz

# Model parameters
h_res = 2.              # Horizontal resistivity


###############################################################################
# empymod
# ```````
# Note: The coordinate system of empymod is positive z down, for emg3d it is
# positive z up. We have to switch therefore src_z, rec_z, and dip.

# Collect common input for empymod.
inp = {
    'src': np.r_[source.coordinates[:2], -source.coordinates[2],
                 source.coordinates[3], -source.coordinates[4]],
    'depth': [],
    'res': h_res,
    'strength': source.strength,
    'freqtime': frequency,
    'htarg': {'pts_per_dec': -1},
}

# Compute e-field
epm_ex = -empymod.loop(rec=[frx, fry, -rz, 0, 0], mrec=False, verb=3,
                       **inp).reshape(np.shape(rx))
epm_ey = -empymod.loop(rec=[frx, fry, -rz, 90, 0], mrec=False, verb=1,
                       **inp).reshape(np.shape(rx))
epm_ez = -empymod.loop(rec=[frx, fry, -rz, 0, -90], mrec=False, verb=1,
                       **inp).reshape(np.shape(rx))

# Compute h-field
epm_hx = empymod.loop(rec=[frx, fry, -rz, 0, 0], verb=1,
                      **inp).reshape(np.shape(rx))
epm_hy = empymod.loop(rec=[frx, fry, -rz, 90, 0], verb=1,
                      **inp).reshape(np.shape(rx))
epm_hz = empymod.loop(rec=[frx, fry, -rz, 0, -90], verb=1,
                      **inp).reshape(np.shape(rx))


###############################################################################
# emg3d
# `````

if coarse_model:
    min_width_limits = 40
    stretching = [1.045, 1.045]
else:
    min_width_limits = 20
    stretching = [1.03, 1.045]

# Create stretched grid
grid = emg3d.construct_mesh(
    frequency=frequency,
    properties=h_res,
    center=source.center,
    domain=([-2500, 2500], [-2500, 2500], [-2900, 2100]),
    min_width_limits=min_width_limits,
    stretching=stretching,
    lambda_from_center=True,
    lambda_factor=0.8,
)
grid

###############################################################################
# Abuse the parameters to take advantage of the duality principle
# ---------------------------------------------------------------
#
# See text at the top. We set here :math:`\rho=1` and :math:`\mu_\mathrm{r} =
# 1/\rho` to get:
#
# .. math::
#     :label: iweta2iwu
#
#     \mathrm{i}\omega\mu_0(1-\mathrm{i}\omega\varepsilon) =
#     \mathrm{i}\omega\mu_0+\omega^2\mu_0\varepsilon \approx
#     \mathrm{i}\omega\mu
#
# (in the diffusive regime), and
#
# .. math::
#     :label: mu2sigma
#
#     \mu_\mathrm{r} = 1/\rho = \sigma \, .

# Define the model        => Set property_x = 1 and mu_r = 1./h_res
model = emg3d.Model(
    grid, property_x=1., mu_r=1./h_res, mapping='Resistivity')


###############################################################################

# Compute the electric field
hfield = emg3d.solve_source(model, source, frequency, verb=4, plain=True)


###############################################################################
# Compare the magnetic field generated from the magnetic source
# -------------------------------------------------------------

e3d_hx = hfield.get_receiver((rx, ry, rz, 0, 0))
plot.plot_sections(
        epm_hx, e3d_hx, x, r'Diffusive Fullspace $H_x$',
        vmin=-15, vmax=-8, mode='abs'
)

###############################################################################

e3d_hy = hfield.get_receiver((rx, ry, rz, 90, 0))
plot.plot_sections(
        epm_hy, e3d_hy, x, r'Diffusive Fullspace $H_y$',
        vmin=-15, vmax=-8, mode='abs'
)

###############################################################################

e3d_hz = hfield.get_receiver((rx, ry, rz, 0, 90))
plot.plot_sections(
        epm_hz, e3d_hz, x, r'Diffusive Fullspace $H_z$',
        vmin=-14, vmax=-7, mode='abs'
)


###############################################################################

plot.plot_line(x, x, e3d_hx.real, epm_hx.real, grid, 'H_x')


###############################################################################
# Compare the electric field generated from the magnetic source
# -------------------------------------------------------------
#
# ``get_magnetic_field`` gets the :math:`H`-field from the :math:`E`-field with
# Faraday's law,
#
# .. math::
#     :label: faraday2
#
#     \nabla \times \mathbf{E} = \rm{i}\omega \mathbf{B} =
#     \rm{i}\omega\mu\mathbf{H}\, .
#
# Using the substitutions introduced in the beginning, and using the same
# function but to get the :math:`E`-field from the :math:`H`-field, we have to
# multiply the result by
#
# .. math::
#     :label: iwu
#
#     \rm{i}\omega\mu\, .
#
# Compute electric field :math:`E` from the magnetic field
# ````````````````````````````````````````````````````````

efield = emg3d.get_magnetic_field(model, hfield)
efield.field *= efield.smu0


###############################################################################
# Plot
# ````

e3d_ex = efield.get_receiver((rx, ry, rz, 0, 0))
plot.plot_sections(
        epm_ex, e3d_ex, x, r'Diffusive Fullspace $E_x$',
        vmin=-17, vmax=-10, mode='abs')


###############################################################################
e3d_ey = efield.get_receiver((rx, ry, rz, 90, 0))
plot.plot_sections(
        epm_ey, e3d_ey, x, r'Diffusive Fullspace $E_y$',
        vmin=-17, vmax=-10, mode='abs')


###############################################################################
e3d_ez = efield.get_receiver((rx, ry, rz, 0, 90))
plot.plot_sections(
        epm_ez, e3d_ez, x, r'Diffusive Fullspace $E_z$',
        vmin=-17, vmax=-10, mode='abs'
)


###############################################################################
emg3d.Report()
